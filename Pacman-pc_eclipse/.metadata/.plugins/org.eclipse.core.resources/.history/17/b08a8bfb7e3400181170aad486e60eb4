package group23.pacman.model;

import java.util.Random;

import group23.pacman.model.Pacman.STATE;
import group23.pacman.view.Animation;
import group23.pacman.view.AnimationManager;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;

public class Ghost extends GameObject implements MovingCharacter {
	
	public enum STATE {
		
		DEAD,
		ALIVE
	
	}
	
	private static final int SPRITE_HEIGHT = 30;
	private static final int SPRITE_WIDTH = 30;
	
	/* Pixels moved per update */
	private static final int SPEED = 2;
	
	/* Handles character animations */
	private AnimationManager animationManager;
	
	private AI ai;
	private boolean isAI;
	
	/* Direction to move and planned direction */
	private char vector;
	private char queuedDirection;
	
	private Random rand;
	
	private STATE state;
	
	private boolean turned;
	
	public Ghost(int x,int y,Board board, boolean isAI) {
		
		rand = new Random();
		turned = false;
		Image ghostOpen = new Image("assets/Ghost/tempGhostOpen.png",SPRITE_WIDTH,SPRITE_HEIGHT,false,false);
		Image ghostClosed = new Image("assets/Ghost/tempGhostClosed.png",SPRITE_WIDTH,SPRITE_HEIGHT,false,false);
		Image[] frames = new Image[2];
		frames[0] = ghostOpen;
		frames[1] = ghostClosed;
		
		
		Animation animation = new Animation(frames,0.3f);
		Animation[] animations = new Animation[1];
		animations[0] = animation;
		
		animationManager = new AnimationManager(animations);
		
		hitBox = new Rectangle();
		this.hitBox.setX(x);
		this.hitBox.setY(y);
		this.hitBox.setHeight(SPRITE_HEIGHT);
		this.hitBox.setWidth(SPRITE_WIDTH);
		this.type = GameObject.TYPE.GHOST;
		this.state = 
		Ghost.STATE.ALIVE;
		
		/*A.I created*/
		if (isAI) {
			ai = new AI(board);
		}
		this.isAI = isAI;
	}
	
	public void update() {
		
		if (isAI && (queuedDirection == vector)) {
			queueMovement(ai.chooseMovement((int)this.hitBox.getX(),(int)this.hitBox.getY()));
		}
		
		animationManager.update();
		animationManager.playAction(0);
		
	}
	
	public void queueMovement(char queuedDirection) {
		
		this.queuedDirection = queuedDirection;
	}

    
    public void setDirection(char vector) {
    	
    	this.vector = vector;	
    	turned = false;
    }
    
    public void setState(STATE state) {
    	
    	this.state = state;
    }
    
    public char getDirection() {
    	
    	return this.vector;
    }
    
    public char getQDirection() {
    	
    	return this.queuedDirection;
    }
    
    public STATE getState() {
    	
    	return this.state;
    }
    
    
    public boolean checkforQueuedAction() {
		
	    return (queuedDirection != vector);
    }
    
    public boolean oppositeDirection() {
    	
    	switch (vector) {
    		case 'S':
    			return true;
			case 'U':
				if (queuedDirection == 'D') {
					return true;
				}
			case 'D':
				if (queuedDirection == 'U') {
					return true;
				}
			case 'L':
				if (queuedDirection == 'R') {
					return true;
				}
			case 'R':
				if (queuedDirection == 'L') {
					return true;
				}
    	}
    	return false;
    }
     
    
    public void updateDestination() {
    
    		
    	if (this.vector == 'U') {
			this.hitBox.setY((int)hitBox.getY() - SPEED);
		}
		else if (this.vector == 'D') {
			this.hitBox.setY((int)hitBox.getY() + SPEED);
		}
		else if (this.vector == 'L') {
			this.hitBox.setX((int)hitBox.getX() - SPEED);
		}
		else if (this.vector == 'R') {
			this.hitBox.setX((int)hitBox.getX() + SPEED);
		}
    }

	
	public void draw(GraphicsContext graphicsContext) {
		
		animationManager.draw(graphicsContext,this.getHitBox().getX(),this.hitBox.getY());
	}

	/* Reset Position when Ghost or Pacman dies and Pacman still has lives left. */
	public void reset(int x, int y) {
		
		this.hitBox.setX(x);
		this.hitBox.setY(y);
		setDirection('S');
		setState(Ghost.STATE.ALIVE);
	}
	
	
	
}
