package group23.pacman.model;

import java.io.File;
import java.util.ArrayList;
import java.util.Vector;

import group23.pacman.model.Pacman.STATE;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

/**The class that handles all the game logics - collisions, level handling, and creation of the map.
 */
public class Game {
	
	/* Each game has a main character */
	private Pacman pacman;
	
	/* Currently only one ghost, intend to change this to array list later */
	private Ghost ghost;
	private Ghost ghost2;
	private Ghost ghost3;
	private Ghost ghost4;
	
	/*Ghost a.i scatter behaviour */
	private int scatterScore;
	private boolean scatter;
	private boolean countDown;
	
	/* Media variables for sound effects */
	private Media chompNoise;
	private MediaPlayer mediaPlayer;
	
	/* ArrayList to access other game objects */
	private ArrayList<GameObject> objects;
	
	/* Board to determine valid coordinates and movements */
	private Board board;
	
	/* Keeps track of user's game progress */
	private int score;
	
	/* Each game has a unique map */
	private char map;
	
	/* Keep track of number of players/game mode */
	private int numPlayers;
	
	/* Game has array list of moving objects */
	private ArrayList<MovingCharacter> characters;
	
	/* Time */
	private long scatterTime = 0;
	
	/* Used to manipulate time for showing to screen */
	private Timer timer;
	
	
	
	public Game(char map,int numPlayers,int player2Ghost,int player3Ghost) {
		
		this.map = map;
		this.numPlayers = numPlayers;
		
		/* Initial score is 0 */
		score = 0;
		
		
		/* Set up sound effect for Pacman eating the pellet */
		chompNoise = new Media(new File("bin/assets/sfx/chompNoise.mp3").toURI().toString());
		
		
		/* Create new board (with user selected map) to define valid coordinates */
		board = new Board();
		board.createBoard(map);
		
		/* Get reference to objects created on the board */
		objects = board.getObjects();
		
		
		/* Set up character objects to add to ArrayList of MovingCharacter interface */
		characters = new ArrayList<MovingCharacter>();
		
		/* Only one pacman object will be created */
		pacman = new Pacman(board.getPacman()[0],board.getPacman()[1], board);
		
		setUpGhosts(player2Ghost,player3Ghost);
		
		/* Initialise the variables used to control the AI scatter behaviour */
		scatter = false;
		countDown = false;
		scatterScore = 0;
		
		/* Add all these moving characters to the array list */
		characters.add(pacman);
		characters.add(ghost);
		characters.add(ghost2);
		characters.add(ghost3);
		characters.add(ghost4);
		
	
	}
	
	private void setUpGhosts(int player2Ghost,int player3Ghost) {
		
		Vector vector = new Vector<Integer>(4);
		vector.add(1);
		vector.add(2);
		vector.add(2);
		vector.add(2);
		/* Set up ghosts according to game mode */
		if (numPlayers == 1) {
			ghost = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 3,"ghost1");
			ghost2 = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 2,"ghost2");
		}
		else if (numPlayers == 2) {
			ghost = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 0,"ghost1");
			ghost2 = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 2,"ghost2");
		}
		else if (numPlayers == 3) {
			ghost = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 0,"ghost1");
			ghost2 = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 0,"ghost2");
		}
		
		/* The remaining 2 ghosts will have a random AI(1) and a chasing AI(4) */
		ghost3 = new Ghost(board.getGhost()[0],board.getGhost()[1], board, 1,"ghost3");
		ghost4= new Ghost(board.getGhost()[0],board.getGhost()[1], board, 4,"ghost4");
		
	}
	
	
	
	/* When updating the game state, we need to check for collisions before updating moving characters
	 * due to the nature of how we implemented the MovingCharacter interface */
	public void update( ) {
		
		checkCollisions();
		pacman.update();
		changeAIBehaviour();
		ghost.update((int)pacman.getX(), (int)pacman.getY(), pacman.getDirection());
		ghost2.update((int)pacman.getX(), (int)pacman.getY(), pacman.getDirection());
		ghost3.update((int)pacman.getX(), (int)pacman.getY(), pacman.getDirection());
		ghost4.update((int)pacman.getX(), (int)pacman.getY(), pacman.getDirection());
		
	}
	
	
	/* Checks character movement collisions and player pellet collisions */
	private void checkCollisions() {
		
		for (MovingCharacter character : characters) {
			
			/* Checks for collision with a ghost. Lose a life when you collide. */
			if (character.getType() == GameObject.TYPE.GHOST) {
				/* If using whip,freeze ghost (temporary interaction) */
				if (pacman.getState() == STATE.POWER_UP) {
					if (pacman.getWhip().getHitBox().intersects(character.getHitBox())){
						characters.remove(character);
						break;
					}
				}
				if (pacman.collidedWith((GameObject) character)) {
					pacman.loseLife();
					return;
				}
			}
			
			/* Restricts the character from moving into the spawn point after it has left the spawn point */
			if (character.getX() == 518 && character.getY() == 307) {
				character.setHasLeftSpawn();
			}
			
			/* If the currently queued direction is not equal to the current direction we are moving in, and it is possible 
			   for us to turn in our current (x,y) position, test if turn is valid (not into a wall), then set the queued direction
			   if valid. */
			if (character.checkforQueuedAction() && board.validTurningPoint((int) character.getX(), (int) character.getY())) {
				if (board.isValidDestination(character.getHasLeftSpawn(), character.getQDirection(), (int) character.getX(), (int) character.getY())){
					character.setDirection(character.getQDirection());
					character.updateDestination();
					return;
				}
			}
			if (board.isValidDestination(character.getHasLeftSpawn(), character.getDirection(), (int) character.getX(), (int) character.getY())) {
				character.updateDestination();
			}
			
		}
		
		/* Loops through the game objects to check if the player has collided with a pellet. Pellet is removed on collision */
		for (GameObject object : objects) {

			if (pacman.collidedWith(object)) {
				if (object.getType() == GameObject.TYPE.PELLET || object.getType() == GameObject.TYPE.SPECIAL_PELLET ) {
					if (object.getType() == GameObject.TYPE.SPECIAL_PELLET) {
						pacman.getWhip().addCharges();
					}
					
					playSfx(chompNoise);
					objects.remove(object);
					score++;
					break;
				}
		
			}
		}
	}
	
	/* To change the movement behaviour to scatter for 5 seconds */
	public void changeAIBehaviour() {
		
		if (score%60 == 0 && score != scatterScore) {
			scatterScore = score;
			scatter = true;
		}
		if (scatter && !countDown) {
			timer = new Timer(5);
			ghost.getAI().setChase(false);
			ghost2.getAI().setChase(false);
			ghost3.getAI().setChase(false);
			ghost4.getAI().setChase(false);
			scatterTime = System.currentTimeMillis();
			countDown = true;
			scatter = false;
		}
		
		/* Count down 1 second */
		if (countDown) {
			if (System.currentTimeMillis() - scatterTime >= 1000) {
				timer.countDown(1);
				scatterTime = System.currentTimeMillis();
			}
		
			/* If 5 seconds is up, end scatter behaviour */
			if (timer.timedOut()) {
				ghost.getAI().setChase(true);
				ghost2.getAI().setChase(true);
				ghost3.getAI().setChase(true);
				ghost4.getAI().setChase(true);
				countDown = false;
			}
		}
	}
	/* Checks if pacman has died and resets all moving objects*/
	public void checkState() {
		
		if (pacman.getState() == Pacman.STATE.DEAD && pacman.getLives() > 0) {
			for (MovingCharacter character: characters) {
				if (character.getType() == GameObject.TYPE.PACMAN) {
					character.reset(board.getPacman()[0],board.getPacman()[1]);
				}
				else if (character.getType() == GameObject.TYPE.GHOST) {
					character.reset(board.getGhost()[0],board.getGhost()[1]);
				}
			}
		}
	}
	
	
	/* Plays Pacman munching sound effect */
	public void playSfx(Media sfx) {
		mediaPlayer = new MediaPlayer(sfx);
		mediaPlayer.setVolume(0.3);
		mediaPlayer.play();
	}
	
	
	
	
	/** ALL PUBLIC GETTERS BELOW **/
	
	/* Public getter to reference Pacman object */
	public Pacman getPacman() {
		
		return this.pacman;
	}
	
	/* Public getter to reference ghost object(s) */
	public Ghost getGhost() {
		
		return this.ghost;
	}
	
	public Ghost getGhost2() {
		
		return this.ghost2;
	}
	
	public Ghost getGhost3() {
		
		return this.ghost3;
	}
	
	public Ghost getGhost4() {
		
		return this.ghost4;
	}
	
	
	
	/* Public getter to reference other game objects (i.e walls, pellets ) */
	public ArrayList<GameObject> getOtherGameObjects() {
		
		return this.objects;
	}
	
	/* Public getter to reference map type */
	public char getMap() {
		
		return this.map;
	}	
	
	/* Public getter to reference game mode */
	public int getPlayers() {
		
		return this.players;
	}
	
	public String getCharges() {
		
		String charges = Integer.toString(pacman.getWhip().getCharges());
		
        return charges;
		
	}
	
	/* Returns the user's score in string format */
	public String getScore() {
		
		String tempScore = Integer.toString(this.score);
		tempScore = new StringBuilder(tempScore).reverse().toString();
        while (tempScore.length() < 4){
           	tempScore = tempScore + "x";
        }
        return tempScore;
	}


}
