package group23.pacman.view;

import group23.pacman.MainApp;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

/**
	The controller class for the welcome screen view.
 */
public class WelcomeScreenController {
	
	/* Constants - do not change */
	private final int BUTTON_WIDTH = 300;
	private final int BUTTON_HEIGHT = 50;
	
	
	/* View elements in WelcomeScreen.fxml */
	@FXML 
	private ImageView playBtnImage;
	@FXML 
	private ImageView tutorialBtnImage;
	@FXML
	private ImageView singlePlayerImage;
	@FXML
	private ImageView twoPlayerImage;
	@FXML
	private ImageView threePlayerImage;
	@FXML
	private ImageView exitBtnImage;
	@FXML
	private ImageView background;
	
	
	/* Main app copy kept to use when referencing to show other views */ 
	private MainApp mainApp;
	
	/* Helps keep track of which button is hovered over */
	private int buttonIndex;
	
	/* Locks the user in game mode selection */
	private boolean playSelected;
	
	/* Keeps track of which game mode is hovered over */
	private int numPlayers;
	

	/* Constructor */
	public WelcomeScreenController() {
		
		
	}

	
	/* Sets up images and backgrounds for initial view */
	@FXML
	private void initialize() {
		
		/* Loads all button and background assets to their respective ImageView elements */
		Image mainMenuBackground = new Image("bg/background-main.png");
		background.setImage(mainMenuBackground);

		Image playImage = new Image("assets/buttons/button-play-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
		playBtnImage.setImage(playImage);
		
		Image tutorialImage = new Image("assets/buttons/button-tutorial.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
		tutorialBtnImage.setImage(tutorialImage);
		
		Image exitImage = new Image("assets/buttons/button-exit.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
		exitBtnImage.setImage(exitImage);
		
		/* Player does not start off with the selection of game modes(i.e. single,two, or three player) */
		playSelected = false;
		
		/* Default game mode is single player */
		numPlayers = 1;
		
		/* First button highlighted and selected is the Play button */
		buttonIndex= 0;
	}
	
	
	/* Adds listener to the button in this view */
	@FXML
	private void handleButton(KeyEvent event) {
		
		/* KEY PRESS TYPE 1 */
		/* ENTER is the confirmation key */
		if (event.getCode() == KeyCode.ENTER) {
			
			/* If the player presses ENTER while selecting game mode, save the game mode and send user to the map/level selection screen 
			 * If there is more than one player, then send them to the character selection screen. */
			if (playSelected) {
				
				mainApp.setPlayers(numPlayers);
				if (numPlayers == 1) {
					mainApp.showLevelSelect();
				}
				else {
					mainApp.showCharacterSelect();
				}
			}
			
			/* If user presses ENTER while not selecting game mode, but is hovered on the play button, show the various game modes and 
			 * the buttons for selection. */
			else if (buttonIndex == 0) {
				
				/* Lock user in game mode select */
				playSelected = true;
				
				/* Default game mode is single player */
				numPlayers = 1;
				
				/* Load buttons */
				Image singlePlayer = new Image("assets/buttons/singlePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
				singlePlayerImage.setImage(singlePlayer);
				
				Image twoPlayer = new Image("assets/buttons/twoPlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
				twoPlayerImage.setImage(twoPlayer);
				
				Image threePlayer = new Image("assets/buttons/ThreePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false);
				threePlayerImage.setImage(threePlayer);
				
				highlightPlayers(numPlayers);
				
			}
			
			/* If user presses ENTER while hovering over the tutorial button */
			else if (buttonIndex == 1) {
				
				mainApp.showHelp();
			}
			
			/* If user presses ENTER while on the exit button, close the game */
			else if (buttonIndex == 2) {
				
				Platform.exit();
			}
		}
		
		/* Key press TYPE 2 */
		/* The UP and DOWN key presses help the user navigate this view */
		else if (event.getCode() == KeyCode.UP) {
			
			/* If locked in game mode selection, the up key navigates through the game mode selection buttons */
			if (playSelected) {
				
				/* Never have less than 1 player */
				numPlayers--;
				numPlayers = (numPlayers < 1) ? 1 : numPlayers;
				highlightPlayers(numPlayers);
			}
			/* If not locked in game mode selection, go up the button list */
			else {
				
				buttonIndex--;
				buttonIndex = (buttonIndex < 0 ) ? 0 : buttonIndex;
				highlightButton(buttonIndex);
			}
			System.out.println("Button Index " + buttonIndex);
			System.out.println("Number of players " + numPlayers + "\n");
		}
		
		else if (event.getCode() == KeyCode.DOWN) {
			if (playSelected) {
				numPlayers++;
				numPlayers = (numPlayers > 3) ? 3 : numPlayers;
				highlightPlayers(numPlayers);
			}
		
			else {
				buttonIndex++;
				buttonIndex = (buttonIndex > 2 ) ? 2 : buttonIndex;
				highlightButton(buttonIndex);
			}
			System.out.println("Button Index " + buttonIndex);
			System.out.println("Number of players " + numPlayers + "\n");
		}
		else if (event.getCode() == KeyCode.ESCAPE) {
			if (playSelected) {
				singlePlayerImage.setImage(new Image("assets/misc/empty.png"));
				twoPlayerImage.setImage(new Image("assets/misc/empty.png"));
				threePlayerImage.setImage(new Image("assets/misc/empty.png"));
				playSelected = false;
				numPlayers = 1;
			}
		}

	}
	

	private void highlightPlayers(int players) {
		
		if (players == 1) {
			singlePlayerImage.setImage(new Image("assets/buttons/singlePlayer-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			twoPlayerImage.setImage(new Image("assets/buttons/twoPlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			threePlayerImage.setImage(new Image("assets/buttons/threePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}
		else if (players == 2) {
			singlePlayerImage.setImage(new Image("assets/buttons/singlePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			twoPlayerImage.setImage(new Image("assets/buttons/twoPlayer-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			threePlayerImage.setImage(new Image("assets/buttons/threePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}
		else if (players == 3) {
			singlePlayerImage.setImage(new Image("assets/buttons/singlePlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			twoPlayerImage.setImage(new Image("assets/buttons/twoPlayer.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			threePlayerImage.setImage(new Image("assets/buttons/threePlayer-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}
	}
	
	
	private void highlightButton(int button) {
		
		if (button == 0) {
			playBtnImage.setImage(new Image("assets/buttons/button-play-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			tutorialBtnImage.setImage(new Image("assets/buttons/button-tutorial.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			exitBtnImage.setImage(new Image("assets/buttons/button-exit.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}
		else if (button == 1) {
			playBtnImage.setImage(new Image("assets/buttons/button-play.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			tutorialBtnImage.setImage(new Image("assets/buttons/button-tutorial-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			exitBtnImage.setImage(new Image("assets/buttons/button-exit.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}
		else if (button == 2) {
			playBtnImage.setImage(new Image("assets/buttons/button-play.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			tutorialBtnImage.setImage(new Image("assets/buttons/button-tutorial.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
			exitBtnImage.setImage(new Image("assets/buttons/button-exit-highlighted.png",BUTTON_WIDTH,BUTTON_HEIGHT,false,false));
		}

	}
	
	
	public void setMainApp(MainApp mainApp) {
		
		this.mainApp = mainApp;
	}

}
